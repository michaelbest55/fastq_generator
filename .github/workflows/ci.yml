name: CI

permissions:
  contents: read

on:
  pull_request:
  push:
    branches:
      - "*main"

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  CLICOLOR: 1

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  ci:
    permissions:
      contents: none
    name: CI
    needs: [test, check, lockfile, docs, rustfmt, clippy, minimal-versions]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Failed
        run: exit 1
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') || contains(needs.*.result, 'skipped')
  test:
    name: Test
    strategy:
      matrix:
        build: [linux, windows, mac, minimal]
        include:
        - build: linux
          os: ubuntu-22.04
          rust: "stable"
          features: "default"
        - build: windows
          os: windows-latest
          rust: "stable"
          features: "default"
        - build: mac
          os: macos-latest
          rust: "stable"
          features: "default"
        - build: minimal
          os: ubuntu-22.04
          rust: "stable"
          features: "minimal"
    continue-on-error: ${{ matrix.rust != 'stable' }}
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
    - uses: Swatinem/rust-cache@v2
    - name: Build
      run: make build-${{matrix.features}}
    - name: Test
      run: make test-${{matrix.features}}
    - name: Test (benches)
      run: make test-${{matrix.features}} ARGS='--workspace --benches'
    - name: Test (ultra-minimal)
      if: matrix.build == 'minimal'
      run: make test-minimal ARGS='--manifest-path Cargo.toml
  check:
    name: Check
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        build: [msrv, debug, release]
        include:
          - build: msrv
            rust: "1.74"  # MSRV
            target: x86_64-unknown-linux-gnu
            features: full
          - build: debug
            rust: stable
            target: x86_64-unknown-linux-gnu
            features: debug
          - build: release
            rust: stable
            target: x86_64-unknown-linux-gnu
            features: release
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
      - name: Check
        run: make check-${{ matrix.features }}
        env:
          TOOLCHAIN_TARGET: ${{ matrix.target }}
  minimal-versions:
    name: Minimal versions
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install stable Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
    - name: Install nightly Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: nightly
    - name: Downgrade dependencies to minimal versions
      run: cargo +nightly generate-lockfile -Z minimal-versions
    - name: Compile with minimal versions
      run: cargo +stable check --workspace --all-features --locked
  lockfile:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
    - uses: Swatinem/rust-cache@v2
    - name: "Is lockfile updated?"
      run: cargo update --workspace --locked
  docs:
    name: Docs
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: "1.84"  # STABLE
    - uses: Swatinem/rust-cache@v2
    - name: Check documentation
      env:
        RUSTDOCFLAGS: -D warnings
      run: make doc
  rustfmt:
    name: rustfmt
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: "1.84"  # STABLE
        components: rustfmt
    - uses: Swatinem/rust-cache@v2
    - name: Check formatting
      run: cargo fmt --all -- --check
  clippy:
    name: clippy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: "1.84"  # STABLE
        components: clippy
    - uses: Swatinem/rust-cache@v2
    - name: Lint (all)
      run: make clippy-full
    - name: Lint (release)
      run: make clippy-release

